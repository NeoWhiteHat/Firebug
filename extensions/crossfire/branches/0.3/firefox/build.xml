<?xml version="1.0"?>
<project name="crossfire" default="xpi" basedir=".">

    <property name="dist.dir" value="dist/"/>
    <property name="build.dir" location="${basedir}/build/"/>
    <property name="test.dir" value="${basedir}/../test"/>
    <property name="test.profile.dir" location="${test.dir}/testprofile/"/>
    <property name="firebug.dir" location="${basedir}/../../../../../branches/firebug1.7"/>

    <property file="version.properties"/>

    <target name="xpi"
        depends="test,prepare"
        description="zip files into firefox XPI">
        <mkdir dir="${dist.dir}"/>

        <zip
            destfile="${dist.dir}/${ant.project.name}-${VERSION}${RELEASE}.xpi"
            basedir="${build.dir}" includes="**/*" />

        <checksum
            file="${dist.dir}/${ant.project.name}-${VERSION}${RELEASE}.xpi"
            property="updateHash"
            algorithm="SHA-1"/>

        <echo>Update hash is ${updateHash}</echo>

        <copy file="update.rdf"
                tofile="${dist.dir}/update.rdf"
                overwrite="true">
                <filterchain>
                        <replacetokens>
                             <token key="VERSION" value="${VERSION}"/>
                             <token key="RELEASE" value="${RELEASE}"/>
                             <token key="UPDATEHASH" value="${updateHash}"/>
                        </replacetokens>
                </filterchain>
        </copy>
        <!-- clean up build artifacts after we are done -->
        <delete includeemptydirs="true" failonerror="false" dir="${build.dir}"/>
    </target>

    <target name="prepare" depends="clean">
        <tstamp>
          <format property="build.time" pattern="HHmmssSS"/>
        </tstamp>
        <mkdir dir="${build.dir}"/>
        <!-- copy install.rdf and replace tokens -->
        <copy file="install.rdf"
                tofile="${build.dir}/install.rdf"
                overwrite="true">
                <filterchain>
                        <replacetokens>
                             <token key="VERSION" value="${VERSION}"/>
                             <token key="RELEASE" value="${RELEASE}"/>
                        </replacetokens>
                </filterchain>
        </copy>

        <!-- write chrome.manifest file  -->
        <echo file="${build.dir}/chrome.manifest">
content     crossfire   chrome/content/
skin        crossfire modern/1.0   chrome/content/skin/
overlay     chrome://firebug/content/firebugOverlay.xul     chrome://crossfire/content/crossfireOverlay.xul
resource    crossfire   resources/

component   {3AB17C22-D1A6-4FF0-9A66-3DBD42114D61}   components/CommandLineHandler.js
contract    @almaden.ibm.com/crossfire/command-line-handler;1    {3AB17C22-D1A6-4FF0-9A66-3DBD42114D61}
category    command-line-handler    m-crossfire-clh    @almaden.ibm.com/crossfire/command-line-handler;1
        </echo>

        <copy todir="${build.dir}">
            <fileset dir="${basedir}" includes="chrome/**/*"/>
            <fileset dir="${basedir}" includes="defaults/**/*"/>
            <fileset dir="${basedir}" includes="components/**/*"/>
            <fileset dir="${basedir}/.." includes="resources/**/*,license.txt"/>
        </copy>
    </target>

    <target name="test" depends="prepare">
        <property name="test.port" value="65432"/>
        <property name="test.profile.name" value="crossfire-test-${build.time}"/>
        <property name="test.timeout" value="10000"/> <!-- ten second timeout -->

        <echo>Creating test profile in ${test.profile.dir}</echo>
        <mkdir dir="${test.profile.dir}"/>

        <exec executable="firefox" failonerror="true">
            <arg value="-no-remote"/>
            <arg value="-CreateProfile"/>
            <arg value="${test.profile.name} ${test.profile.dir}"/>
        </exec>

        <!-- link extensions -->
        <mkdir dir="${test.profile.dir}/extensions/"/>
        <echo> Installing Firebug at ${firebug.dir} </echo>
        <echo file="${test.profile.dir}/extensions/firebug@software.joehewitt.com">${firebug.dir}</echo>
        <echo> Installing Crossfire at ${build.dir} </echo>
        <echo file="${test.profile.dir}/extensions/crossfire@almaden.ibm.com">${build.dir}</echo>

        <echo file="${test.profile.dir}/prefs.js" append="true">
            user_pref("extensions.firebug.allPagesActivation", "on");
            user_pref("extensions.firebug.script.enableSites", true);
            user_pref("extensions.firebug.console.enableSites", true);
        </echo>

        <parallel threadCount="2" >
            <sequential>
                <!-- launch firefox in server mode with test profile -->
                <echo> Launching Firefox and Crossfire server on port ${test.port} </echo>
                <exec executable="firefox" timeout="${test.timeout}">
                    <arg value="-no-remote"/>
                    <arg value="-P"/>
                    <arg value="${test.profile.name}"/>
                    <arg value="-crossfire-server-port"/>
                    <arg value="${test.port}"/>
                </exec>
            </sequential>
            <sequential>
                <waitfor maxwait="${test.timeout}" maxwaitunit="millisecond">
                    <socket server="localhost" port="${test.port}"/>
                </waitfor>

                <!-- run test client script -->
                <echo> Starting test client...</echo>
                <exec executable="python" timeout="${test.timeout}" failonerror="true">
                    <arg value="${test.dir}/crossfire_test_client.py"/>
                    <arg value="--host"/>
                    <arg value="localhost"/>
                    <arg value="--port"/>
                    <arg value="${test.port}"/>
                    <arg value="--command"/>
                    <arg value="createcontext"/>
                    <arg value="--args"/>
                    <arg value='{ \"url\": \"http://www.getfirebug.com\" }'/>
                </exec>
            </sequential>
          </parallel>
    </target>

    <target name="clean">
        <delete includeemptydirs="true" failonerror="false" dir="${build.dir}"/>
        <delete includeemptydirs="true" failonerror="false" dir="${dist.dir}"/>
        <delete includeemptydirs="true" failonerror="false" dir="${test.profile.dir}"/>
    </target>
</project>