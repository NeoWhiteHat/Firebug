/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Initial Developer of the Original Code is IBM Corp
 *
 * Portions created by the Initial Developer are Copyright (C) 2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *     John J. Barton <bartonjj@us.ibm.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl" 
#include "nsIFirebug.idl"

interface jsdIStackFrame;
interface jsdIScript;
interface jsdIValue;
interface nsIDOMWindow;

[scriptable, uuid(E978E44E-9158-4894-B92D-73ABF5F48DB0)]
interface nsIFireBugDebuggerWithEval : nsIFirebugDebugger
{
  /* 
   * Called when a eval-level function (script) it ready to run.
   * in frame from breakpoint hook in PC=0 of TopLevel scriptl
   * out file name to bind to all scripts from this TopLevel
   */
  unsigned long onEval(in jsdIStackFrame frame, out jsdIValue val);
  /*
   * A script created by an eval is created; 
   *   url is eval-level script url,
   *   lineNo is first line of script relative to first line of url,
   *   script is jsd object for script with fileName and baseLineNumber of old
   */
  void onEvalScript(in string url, in unsigned long lineNo, in jsdIScript script);
  /* 
   * Called when a top-level function (script) it ready to run.
   * in frame from breakpoint hook in PC=0 of TopLevel script
   * out file name to bind to all scripts from this TopLevel
   */
  unsigned long onTopLevel(in jsdIStackFrame frame, out jsdIValue val);
  /*
   * A script created by compiling top-level is created; 
   *   url is top-level script url form onTopLevel
   *   lineNo is first line of script relative to first line of url,
   *   script is jsd object for script with fileName and baseLineNumber of old
   */
  void onTopLevelScript(in string url, in unsigned long lineNo, in jsdIScript script);
  /*
   * Called when a browser-generated event script is created
   * in frame from breakpoint hook in PC=0 of eventLevel script
   * out file name to bind to all scripts from this eventLevel   */
  unsigned long onEventScript(in jsdIStackFrame frame, out jsdIValue val);
};

[scriptable, uuid(1E4FDF9C-C5F9-423c-B313-AA4A4542760E)]
interface nsIFireBugWithEval : nsIFirebug 
{
    void registerDebuggerWithEval(in nsIFireBugDebuggerWithEval debugger);
    void unregisterDebuggerWithEval(in nsIFireBugDebuggerWithEval debugger);
};
