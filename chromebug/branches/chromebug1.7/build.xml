<?xml version="1.0" ?>

<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
* In order to build Chromebug xpi run: $ant

* The final xpi + update.rdf file will be located in 'release' sub directory.

* If GETFIREBUG is properly specified in content/chromebug/branch.properties
  (it assumes you have fbug and getfirebug.com directories at the same level)
  The xpi + update.rdf will be also deployed for you there and so, you can just commit.

* To check GETFIREBUG value run: ant echo

* To build xpi and generate JS doc (from source comments) run: $ant jsdoc
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
<project name="chromebug" basedir="." default="build">

    <!-- Properties -->
    <property file="content/chromebug/branch.properties"/>

    <!-- Directories -->
    <property name="build.dir" value="./build"/>
    <property name="release.dir" value="./release"/>
    <property name="deploy-xpi.dir" value="${GETFIREBUG}/releases/chromebug"/>
    <property name="deploy-jsdoc.dir" value="${GETFIREBUG}/developer/api/chromebug${VERSION}"/>

    <available file="${GETFIREBUG}" property="deploy.dir.available"/>

    <!-- echo -->
    <target name="echo">
        <echo message="Build directory: ${build.dir}"/>
        <echo message="Deploy directory ${GETFIREBUG} available: ${deploy.dir.available}"/>
    </target>

    <!-- Clean -->
    <target name="clean">
        <delete dir="${build.dir}"/>
        <delete dir="${release.dir}"/>
    </target>

    <!-- Build -->
    <target name="build" depends="clean">

        <mkdir dir="${build.dir}" />
        <mkdir dir="${release.dir}" />

        <!-- Copy all files -->
        <copy todir="${build.dir}">
            <fileset dir=".">
               <include name="**/*.js"/>
               <include name="**/*.xul"/>
               <include name="**/*.properties"/>
               <include name="**/*.css"/>
               <include name="**/*.html"/>
               <include name="**/*.xml"/>
               <include name="**/*.dtd"/>
               <include name="**/*.png"/>
               <include name="**/*.gif"/>
               <include name="**/*.ico"/>
               <include name="**/*.manifest"/>
               <include name="**/*.txt"/>
               <include name="**/*.html"/>
            </fileset>
        </copy>

        <!-- Copy install.rdf with updated release version info -->
        <copy file="install.rdf.tpl.xml" tofile="${build.dir}/install.rdf"/>
        <replace file="${build.dir}/install.rdf" propertyFile="content/chromebug/branch.properties">
            <replacefilter token="@VERSION@" property="VERSION"/>
            <replacefilter token="@RELEASE@" property="RELEASE"/>
        </replace>

        <!-- Remove unnecessary *.xml files in the root directory (like e.g. this build file),
            but not from sub directories. -->
        <delete dir="${build.dir}" includes="*.xml" />

        <!-- Create final chromebug.xpi file -->
        <zip destfile="${release.dir}/chromebug-${VERSION}${RELEASE}.xpi"
            basedir="${build.dir}" update="true" />

        <!-- The xpi is created, let's remove the build dir. -->
        <delete dir="${build.dir}"/>

        <!-- Copy update.rdf file with updated release version info -->
        <copy file="update.rdf.tpl.xml" tofile="${release.dir}/update.rdf"/>
        <replace file="${release.dir}/update.rdf" propertyFile="content/chromebug/branch.properties">
            <replacefilter token="@VERSION@" property="VERSION"/>
            <replacefilter token="@RELEASE@" property="RELEASE"/>
            <replacefilter token="@LEAF@" value="chromebug-${VERSION}${RELEASE}.xpi"/>
        </replace>

        <!-- Final message -->
        <echo message="Chromebug version: ${VERSION}${RELEASE} in ${release.dir}"/>

        <!-- Deploy -->
        <antcall target="deploy" />
    </target>

    <!-- Deploy if target available -->
    <target name="deploy" if="deploy.dir.available">

        <!-- Deploy xpi & update.rdf files -->
        <copy file="${release.dir}/update.rdf" todir="${deploy-xpi.dir}" overwrite="true"/>
        <copy file="${release.dir}/chromebug-${VERSION}${RELEASE}.xpi" todir="${deploy-xpi.dir}" overwrite="true"/>
        <echo message="XPI deployed to: ${VERSION}${RELEASE} to ${deploy-xpi.dir}"/>
    </target>

    <!-- Deploy if target available -->
    <target name="deploy-jsdoc" if="deploy.dir.available">

        <!-- Deploy jsdoc -->
        <copy todir="${deploy-jsdoc.dir}">
            <fileset dir="${release.dir}/jsdoc"/>
        </copy>

        <echo message="JSDoc deployed to: ${VERSION}${RELEASE} to ${deploy-xpi.dir}"/>
    </target>

    <!-- Support for generating docs from Chromebug source code using js-doc-toolkit
        See the output in $svn/jsdoc/out directory -->
    <target name="jsdoc" depends="build" description="Generate documentation">

        <property name="jsdoc.dir" value="../../../jsdoc/"/>
        <property name="jsdoc-toolkit.dir" value="${jsdoc.dir}/jsdoc-toolkit-2.3.0/"/>
        <property name="jsdoc-output.dir" value="${release.dir}/jsdoc/"/>
        <property name="jsdoc-temp.dir" value="${release.dir}/jstemp/"/>

        <path id="jsdoctoolkit">
            <!-- Rhino js.jar 1.7.R2 must be used with jsdoctoolkit-ant-task-1.0.1.jar -->
            <fileset dir="${jsdoc.dir}" includes="*.jar"/>
        </path>

        <taskdef name="jsdoctoolkit"
            classpathref="jsdoctoolkit"
            classname="uk.co.darrenhurley.ant.tasks.JsDocToolkit"/>

        <echo message="Generate doc from Chromebug source."/>

        <!-- Clean the output direcotory -->
        <delete dir="${jsdoc-output.dir}"/>
        <delete dir="${jsdoc-temp.dir}"/>

        <!-- Copy only chromebug JS files into a temp directory, since
            jsdoctoolkit-ant-task doesn't know how to exclude subdirectories
            (e.g Firebug source). This directory will be used for doc generation. -->
        <copy todir="${jsdoc-temp.dir}/components">
            <fileset dir="./components">
               <include name="**/*.js"/>
            </fileset>
        </copy>
        <copy todir="${jsdoc-temp.dir}/content">
            <fileset dir="./content">
               <include name="**/*.js"/>
            </fileset>
        </copy>

        <!-- Parse all source files -->
        <jsdoctoolkit jsdochome="${jsdoc-toolkit.dir}"
            template="firebug"
            outputdir="${jsdoc-output.dir}"
            inputdir="${jsdoc-temp.dir}" />

        <!-- Deploy -->
        <antcall target="deploy-jsdoc" />
    </target>

</project>
